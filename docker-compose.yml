services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Set environment variables directly in the docker-compose file
    # environment:
    #   ENV_VARIABLE: ${ENV_VARIABLE}
    #   NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
    # Set environment variables based on the .env file
    # env_file:
    #   - .env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    ports:
      - 3000:3000
    depends_on:
      - backend

  backend:
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      PORT: 3030
      NODE_ENV: dev
      FRONTEND_URL: http://localhost:3000
      DATABASE_URL: postgres://postgres:password@dev-db:5432/mydb
      LOG_LEVEL: info
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - 3030:3030
    depends_on:
      - dev-db
      - redis

  dev-db:
    image: postgres:alpine
    ports:
      - 5555:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    restart: unless-stopped

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: unless-stopped

  test-db:
    image: postgres:alpine
    ports:
      - 5556:5432
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: testdb
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles: [test]
